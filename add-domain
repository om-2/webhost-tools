#!/bin/bash -e
# add-domain user domain [--ssl --php --skeleton --seed
# USAGE:
#     VERBOSE - Narrates each command
#     DEBUG - outputs codes
###############################################################################
set -e          # exit on command errors
set -o pipefail # capture fail exit codes in piped commands
#set -x         # execution tracing debug messages

# Get command info
CMD_PWD=$(pwd)
CMD="$0"
CMD_DIR="$(cd "$(dirname "$CMD")" && pwd -P)"

# Defaults and command line options
[ "$VERBOSE" ]  ||  VERBOSE=
[ "$DEBUG" ]    ||  DEBUG=

# Basic helpers
out() { echo "$(date +%Y%m%dT%H%M%SZ): $*"; }
err() { out "$*" 1>&2; }
vrb() { [ ! "$VERBOSE" ] || out "$@"; }
dbg() { [ ! "$DEBUG" ] || err "$@"; }
die() { err "EXIT: $1" && [ "$2" ] && [ "$2" -ge 0 ] && exit "$2" || exit 1; }
usage() { [ "$0" = "bash" ] || sed '2,/^##/p;d' "$0"; echo "$*"; exit 1; }

[ "$DEBUG" ]  &&  set -x

###############################################################################

# Validate some things
# [ "$1" = "--help" -o "$1" = "-h" ]  &&  usage ""

# Variables
user=""
domain=""
seed=""

# Booleans
ssl=0
php=0
skeleton=0

vrb "Processing CLI arguments"
while [ $# -gt 0 ] ; do
  case "$1" in
  -h|--help)
    usage ""
    ;;
  --ssl)
    ssl=1
    vrb "SSL support enabled"
    ;;
  --php)
    php=1 
    vrb "PHP support enabled"
    ;;
  --skeleton)
    skeleton=1
    vrb "Skeleton index will be created"
    ;;
  -*)
    usage "Unknown option '$1'"
    ;;
  *)
    if [ -z "$user" ] ; then
      user="$1"
      vrb "User set to [${user}]"
    elif [ -z "$domain" ] ; then
      domain="$1"
      vrb "Domain set to [${domain}]"
    elif [ -z "$seed" ] ; then
      seed="$1"
      vrb "Seed set to [${seed}]"
    else
      usage "Too many arguments"
    fi
    ;;
  esac
  shift
done

if [ -z "$domain" ] ; then
    usage "Not enough arguments"
fi

###############################################################################
# Begin heavy lifting

# Unix account
if id ${user} > /dev/null 2>&1; then
  vrb "User [${user}] already exists"
else
  vrb "User [${user}] does not exist."
  vrb "Creating [${user}]..."
  useradd  -m -s /usr/sbin/nologin -d /home/${user} ${user}
fi

home="/home/${user}"
webroot="${home}/web"
domainroot="${webroot}/www/${domain}"

# Web directory structure
# /home/$user/web/{www/{$domain},logs,php-session}
if ! [ -d /home/${user}/web ]; then
  vrb "Creating web directory structure"
  mkdir -p /home/${user}/web/{www,logs}
  vrb "Symlinking ${webroot}/www to ${home}/www"}
  ln -s ${webroot}/www ${home}/www
fi

if ! [ -d ${domainroot} ]; then
  mkdir -p ${domainroot}
fi

if [ "$php" -eq 1 ] && ! [ -d ${webroot}/php-session ]; then
  vrb "Creating PHP session directory"
  mkdir $webroot"/php-session"
fi

vrb "Doing the permissions dance"
chown -R ${user}:www-data $webroot
chmod g+s $webroot
chmod o+rx $home

# Skeleton
if [ "$php" -eq 1 ]; then
  vrb "Creating skeleton PHP page"
  echo "<?php echo 'New site!'; ?>" > ${domainroot}/index.php
else
  vrb "Creating skeleton HTML page"
  page=$(cat <<HTML
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>New Site</title>
  </head>
  <body>
    <p>New site!</p>
  </body>
</html>
HTML
)
  echo "${page}" > ${domainroot}/index.html
fi

# nginx site configuration
nginx_root="/etc/nginx"
template_root="${nginx_root}/site/template"
user_config_root="${nginx_root}/site/${user}"


function sar_config {
  vrb "Searching and replacing variables"
  for site_conf in $(ls $user_config_root)
  do
    sed -i -e "s/%USER%/${user}/g" ${user_config_root}/$site_conf
    # In the add-domain script domain==site.
    sed -i -e "s/%SITE%/${domain}/g" ${user_config_root}/$site_conf
  done
}

vrb "Generating nginx site configuration"
if ! [ -d ${user_config_root} ]; then
  mkdir ${user_config_root}
fi

vrb "Creating HTTP server"
http_chain="A-http"
if [ "$ssl" -eq 1 ]; then
  http_chain="${http_chain} 1-acme-proxy 0-https-redirect Z-http"
elif [ "$php" -eq 1 ]; then
  # This is confusing. We don't enable PHP over HTTP is SSL is enabled
  http_chain="${http_chain} 0-php Z-http"
else
  http_chain="${http_chain} 0-static Z-http"
fi

dbg "HTTP Template Chain: [${http_chain}]"

for template in ${http_chain}
do
  cat ${template_root}/${template} >> ${user_config_root}/${domain}.conf
done

sar_config


if [ "$ssl" -eq 1 ]; then
  # Do SSL verification stuff
  vrb "Reloading nginx"
  systemctl reload nginx.service
  sleep 1

  # Here we test in a really ghetto way if the domains are pointed at us.
  vrb "Testing if domain points to us"
  curl "${domain}/domain-test" > /dev/null 2>&1
#  sleep 1
#  curl "www.${domain}/domain-test" > /dev/null 2>&1

  count=$(grep -c "domain-test" ${webroot}/logs/access-${domain}.log)

  if [ "$count" -ne 1 ]; then
    die "Domain validation failed." 1
  fi

  vrb "Running acmetool against domain"
  #acme=$(acmetool want ${domain} www.${domain})
  acme=$(acmetool want ${domain})
  if [ $? -ne 0 ]; then
    ./del-user ${user}
    die "Acmetool failed: ${acme}" 1
  fi

  vrb "Creating HTTPS server"
  https_chain="A-ssl"
  
  if [ "$php" -eq 1 ]; then
    https_chain="${https_chain} 0-php Z-ssl"
  else
    https_chain="${https_chain} 0-static Z-ssl"
  fi

  dbg "HTTPS Template Chain: [${https_chain}]"

  for template in ${https_chain}
  do
    cat ${template_root}/${template} >> ${user_config_root}/${domain}-ssl.conf
  done
fi

sar_config

vrb "Testing nginx config for validity"
if nginx -t -c /etc/nginx/nginx.conf > /dev/null 2>&1; then
  vrb "Nginx config test passed"
else
  err "Nginx config not valid"
  nginx -t -c /etc/nginx/nginx.conf
  exit 1
fi

systemctl reload nginx.service


# PHP configuration
if [ "$php" -eq 1 ]; then
  vrb "Generating PHP FPM Worker Pool Configuration"
  fpm_conf="/etc/php-fpm.d/${user}.conf"

  cp /etc/php-fpm.d/fpm-pool.conf.template $fpm_conf

  sed -i -e "s/%USER%/${user}/g" $fpm_conf
  systemctl reload php-fpm.service
fi



# generate htaccess
if ! [ -f ${webroot}/.htpasswd ]; then
  htpasswd -c ${webroot}/.htpasswd ${user}
fi
